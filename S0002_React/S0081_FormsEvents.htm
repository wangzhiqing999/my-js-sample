<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title> React 表单与事件 </title>

	<!--
    <script src="https://unpkg.com/react@latest/dist/react.js"></script>
    <script src="https://unpkg.com/react-dom@latest/dist/react-dom.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
	-->

    <script src="js/react.js"></script>
    <script src="js/react-dom.js"></script>
    <script src="js/babel.min.js"></script>

  </head>



  <body>



    <div id="root"></div>

	<script type="text/babel">

		var BasicText = React.createClass({
			// 状态初始值.
			getInitialState: function() {
				return {value: '1初始值！'};
			},

			handleChange: function(event) {
				// 修改状态值.
				console.log("event.target.value = ", event.target.value);
				this.setState({value: event.target.value});
			},

			render: function() {
				// 获取初始值.
				var value = this.state.value;

				// 展示的页面内容.
				return <div>
					{/* input  设置数值， 并定义 onChange 事件. */}
					<input type="text" value={value} onChange={this.handleChange} />
					<h4>{value}</h4>
				</div>;
			}
		});

		// 最终展示.
		ReactDOM.render(
			<BasicText />,
			document.getElementById('root')
		);

    </script>




	<hr/>


    <div id="root2"></div>

	<script type="text/babel">

		var Content2 = React.createClass({
			render: function() {
				return  <div>
				{/* input  设置属性， 全部由父组件传递. */}
				<input type="text" value={this.props.myDataProp} onChange={this.props.updateStateProp} />
				<h4>{this.props.myDataProp}</h4>
				</div>;
			}
		});

		var BasicText2 = React.createClass({
			// 状态初始值.
			getInitialState: function() {
				return {value: '2初始值！'};
			},
			handleChange: function(event) {
				// 修改状态值.
				console.log("event.target.value = ", event.target.value);
				this.setState({value: event.target.value});
			},
			render: function() {
				var value = this.state.value;
				return <div>
					{/* 调用子组件， 并将本组件的 状态，作为参数， 传递给子组件.  */}
					<Content2 myDataProp = {value} updateStateProp = {this.handleChange}></Content2>
				</div>;
			}
		});

		// 最终展示.
		ReactDOM.render(
			<BasicText2 />,
			document.getElementById('root2')
		);

    </script>



	<hr/>




    <div id="root3"></div>

	<script type="text/babel">
		var HelloMessage3 = React.createClass({
			getInitialState: function() {
				return {value: '3初始值！'};
			},
			handleChange: function(event) {
				this.setState({value: '3生效值'})
			},
			render: function() {
				var value = this.state.value;
			return <div>
					<button onClick={this.handleChange}>点我</button>
					<h4>{value}</h4>
			   </div>;
			}
		});
		ReactDOM.render(
			<HelloMessage3 />,
			document.getElementById('root3')
		);
	</script>




	<hr/>

    <div id="root4"></div>

	<script type="text/babel">

		// 按钮组件.
		var Content4 = React.createClass({
			render: function() {
				return  <div>
						<button onClick = {this.props.updateStateProp}>点我</button>
						<h4>{this.props.myDataProp}</h4>
					</div>
			}
		});


		var HelloMessage4 = React.createClass({
			getInitialState: function() {
				return {value: '4初始值！'};
			},
			handleChange: function(event) {
				this.setState({value: '4生效值'})
			},
			render: function() {
				var value = this.state.value;
				return <div>
							<Content4 myDataProp = {value} updateStateProp = {this.handleChange}></Content4>
						</div>;
			}
		});

		ReactDOM.render(
			<HelloMessage4 />,
			document.getElementById('root4')
		);
	</script>






	<hr/>
	<div id="root5"></div>

	<script type="text/babel">

		var BasicInputTest = React.createClass({
			// 状态初始值.
			getInitialState: function() {
				return {
					textValue: 'Text初始值！',
					textareaValue: 'TextArea初始值！',
					checkboxValue: false,
					radioValue: 'A',
					selectValue: 'A'
				};
			},

			handleTextChange: function(event) {
				// 修改 Text 状态值.
				console.log("# handleTextChange # event.target.value = ", event.target.value);
				this.setState({textValue: event.target.value});
			},
			handleTextAreaChange: function(event) {
				// 修改 TextArea 状态值.
				console.log("# handleTextAreaChange # event.target.value = ", event.target.value);
				this.setState({textareaValue: event.target.value});
			},
			handleCheckBoxChange: function(event) {
				// 修改 Checkbox 状态值.
				console.log("# handleCheckBoxChange # event.target.checked  = ", event.target.checked );
				this.setState({checkboxValue: event.target.checked });
			},
			handleRadioChange: function(event) {
				// 修改 Radio 状态值.
				console.log("# handleRadioChange # event.target.value = ", event.target.value);
				this.setState({radioValue: event.target.value});
			},
			handleSelectOptionChange: function(event) {
				// 修改 Radio 状态值.
				console.log("# handleSelectOptionChange # event.target.value = ", event.target.value);
				this.setState({selectValue: event.target.value});
			},



			render: function() {
				// 获取初始值.
				var textValue = this.state.textValue;
				var textareaValue = this.state.textareaValue;
				var checkboxValue = this.state.checkboxValue;
				var radioValue = this.state.radioValue;
				var selectValue = this.state.selectValue;

				// 展示的页面内容.
				return <table>
					<tbody>
						<tr>
							<td> Text 测试: </td>
							<td> <input type="text" value={textValue} onChange={this.handleTextChange} /> </td>
							<td> {textValue}  </td>
						</tr>
						<tr>
							<td> TextArea 测试: </td>
							<td>
								{/*
								注意：
									这里与 HTML 上的处理有差异.
									HTML 是  <textarea> 文本内容. </textarea>
									React 则是 <textarea value={内容} />
								*/}
								<textarea value={textareaValue} onChange={this.handleTextAreaChange} />
							</td>
							<td> {textareaValue}  </td>
						</tr>
						<tr>
							<td> CheckBox 测试: </td>
							<td> <input type="checkbox" checked={checkboxValue} onChange={this.handleCheckBoxChange}  /> Power </td>
							<td> {checkboxValue ? 'ON' : 'OFF'} </td>
						</tr>
						<tr>
							<td> Radio 测试: </td>
							<td>
								<input type="radio" name="testABC" checked={radioValue == 'A'} value="A" onChange={this.handleRadioChange}  /> A
								<input type="radio" name="testABC" checked={radioValue == 'B'} value="B" onChange={this.handleRadioChange}  /> B
								<input type="radio" name="testABC" checked={radioValue == 'C'} value="C" onChange={this.handleRadioChange}  /> C
							</td>
							<td> {radioValue} </td>
						</tr>
						<tr>
							<td> Select 测试: </td>
							<td>
								{/*
								注意：
									这里与 HTML 上的处理有差异.
									HTML 选中是在 option 上面设置 selected .
									React 则是简单在 select 上，设置 value.
								*/}
								<select name="testSelect" onChange={this.handleSelectOptionChange} value={selectValue}>
									<option value="A">A</option>
									<option value="B">B</option>
									<option value="C">C</option>
									<option value="D">D</option>
								</select>
							</td>
							<td> {this.state.selectValue} </td>
						</tr>
					</tbody>
				</table>;
			}
		});

		// 最终展示.
		ReactDOM.render(
			<BasicInputTest />,
			document.getElementById('root5')
		);

    </script>


  </body>
</html>
