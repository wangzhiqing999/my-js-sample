<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>组件生命周期</title>

	<!--
    <script src="https://unpkg.com/react@latest/dist/react.js"></script>
    <script src="https://unpkg.com/react-dom@latest/dist/react-dom.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
	-->

    <script src="js/react.js"></script>
    <script src="js/react-dom.js"></script>
    <script src="js/babel.min.js"></script>

	<!-- 上面代码一共用了三个库： react.js 、react-dom.js 和 Browser.js ，它们必须首先加载。
		其中，
		react.js 是 React 的核心库，
		react-dom.js 是提供与 DOM 相关的功能，
		Browser.js 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。
	-->
  </head>


  <body>

<ul>
	<li>componentWillMount : 在渲染前调用,在客户端也在服务端。</li>
	<li>componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。</li>
	<li>componentWillReceiveProps : 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。</li>
	<li>shouldComponentUpdate : 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。
 可以在你确认不需要更新组件时使用。</li>
	<li>componentWillUpdate : 在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</li>
	<li>componentDidUpdate : 在组件完成更新后立即调用。在初始化时不会被调用。</li>
	<li>componentWillUnmount : 在组件从 DOM 中移除的时候立刻被调用。</li>
</ul>



    <div id="root"></div>

	<script type="text/babel">

		// 内容组件.
		var Content = React.createClass({
			// componentWillMount 在渲染前调用,在客户端也在服务端。
			componentWillMount:function() {
				console.log('Component WILL MOUNT!')
			},
			// componentDidMount : 在第一次渲染后调用，只在客户端。
			componentDidMount:function() {
				console.log('Component DID MOUNT!')
			},
			// componentWillReceiveProps 在组件接收到一个新的prop时被调用。
			componentWillReceiveProps:function(newProps) {
				console.log('Component WILL RECEIVE PROPS!')
			},
			// shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。
			shouldComponentUpdate:function(newProps, newState) {
				return true;
			},
			// componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。
			componentWillUpdate:function(nextProps, nextState) {
				console.log('Component WILL UPDATE!');
			},
			// componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。
			componentDidUpdate:function(prevProps, prevState) {
				console.log('Component DID UPDATE!')
			},
			// componentWillUnmount在组件从 DOM 中移除的时候立刻被调用。
			componentWillUnmount:function() {
			 console.log('Component WILL UNMOUNT!')
			},
			render: function () {
				return (
					<div>
					  <h3>{this.props.myNumber}</h3>
					</div>
				);
			}
		});


		// 按钮组件（使用前面的内容组件）
		var Button = React.createClass({
			// 初始状态.
			getInitialState: function() {
				return {
					data:0
				};
			},
			setNewNumber: function() {
				// 更新状态.
				this.setState({data: this.state.data + 1})
			},
			render: function () {
				return (
					<div>
						<button onClick = {this.setNewNumber}>INCREMENT</button>
						<Content myNumber = {this.state.data}></Content>
					</div>
				);
			}
		});


		// 最终显示.
		ReactDOM.render(
			<div>
			  <Button />
			</div>,
			document.getElementById('root')
		);

    </script>





  </body>
</html>
