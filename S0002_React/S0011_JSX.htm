<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>JSX</title>

	<!--
    <script src="https://unpkg.com/react@latest/dist/react.js"></script>
    <script src="https://unpkg.com/react-dom@latest/dist/react-dom.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
	-->

    <script src="js/react.js"></script>
    <script src="js/react-dom.js"></script>
    <script src="js/babel.min.js"></script>

  </head>


  <body>


    <div id="root"></div>

	<script type="text/babel">

		var names = ['张三', '李四', '王五', '赵六'];

		// ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。
		ReactDOM.render(
			<div>
			<h3> 基本语法规则测试 </h3>
			{
				names.map(function (name) {
					return <div>Hello, {name}!</div>
				})
			}
			</div>,
			document.getElementById('root')
		);

		// 上面代码体现了 JSX 的基本语法规则：
		// 遇到 HTML 标签（以 < 开头），就用 HTML 规则解析；
		// 遇到代码块（以 { 开头），就用 JavaScript 规则解析。
    </script>



	<hr/>


	<div id="test1"></div>
    <script type="text/babel">

		var testArr = [
			<h1> 测试! </h1>,
			<h2> 简单将一个数组 </h2>,
			<h3> 丢到 JSX 中 </h3>,
			<h4> JSX 允许在模板中插入数组，数组会自动展开所有成员. </h4>
		];

		ReactDOM.render(
			<div>
				{testArr}
			</div>
			,
			document.getElementById('test1')
		);
    </script>




	<hr/>


	<div id="test2"></div>

    <script type="text/babel">

		// 这里定义一个样式.
		var myStyle = {
			fontSize: 100,
			color: '#FF0000'
		};

		ReactDOM.render(
			<span style = {myStyle} >
				这里是使用 JSX 来处理样式的例子！
				{/*  如果需要在这个位置上，写注释信息，需要这样干！  */}
			</span>
			,
			document.getElementById('test2')
		);
    </script>




	<hr/>




  </body>
</html>
